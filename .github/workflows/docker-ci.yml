name: 🐳 Simple Docker CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🧪 Test MERN Stack
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name:  Build Images
      run: |
        docker build -t frontend ./frontend
        docker build -t backend ./backend

    - name: 🚀 Start Services
      run: |
        docker-compose up -d
        sleep 20

    - name: 🔍 Test Services
      run: |
        docker-compose ps
        echo "✅ Services started successfully!"

    - name: 🛑 Cleanup
      if: always()
      run: docker-compose down -v

  # 🔐 Security Scanning
  security-scan:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest
    needs: test-builds
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔨 Build images for scanning
      working-directory: ./MERN-Telemetry
        run: |
        # Build MERN stack images for scanning
        docker build -t mern-telemetry-frontend:scan ./frontend
        docker build -t mern-telemetry-backend:scan ./backend  # Express.js API    - name: 🛡️ Run Trivy vulnerability scanner - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'mern-telemetry-frontend:scan'
        format: 'sarif'
        output: 'trivy-frontend.sarif'

    - name: 🛡️ Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'mern-telemetry-backend:scan'
        format: 'sarif'
        output: 'trivy-backend.sarif'

    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: '.'

  # 📊 Performance Testing
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🚀 Start services
      working-directory: ./MERN-Telemetry
      run: |
        docker-compose up -d --build
        sleep 45  # Wait for services to fully start

    - name: 📦 Install Artillery for load testing
      run: npm install -g artillery@latest

    - name: ⚡ Run performance tests
      working-directory: ./MERN-Telemetry
      run: |
        # Create simple load test config
        cat > load-test.yml << EOF
        config:
          target: 'http://localhost:5001'
          phases:
            - duration: 60
              arrivalRate: 5
          defaults:
            headers:
              Content-Type: 'application/json'
        scenarios:
          - name: "Express.js API Load Test"
            requests:
              - get:
                  url: "/health"
              - get:
                  url: "/api/cpu"
              - get:
                  url: "/api/memory"
              - get:
                  url: "/api/disk"
              - get:
                  url: "/api/network"
        EOF
        
        echo "🚀 Running load test..."
        artillery run load-test.yml

    - name: 🛑 Stop services
      if: always()
      working-directory: ./MERN-Telemetry
      run: docker-compose down -v

  # 🚢 Build and Push Images (Production)
  build-and-push:
    name: 🚢 Build & Push Images
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Extract metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 📝 Extract metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🚢 Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./MERN-Telemetry/frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🚢 Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./MERN-Telemetry/backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 📋 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔐 Configure staging deployment
      working-directory: ./MERN-Telemetry
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add staging deployment logic here
        # This could deploy to cloud providers like AWS, Azure, GCP
        # or container orchestration platforms like Kubernetes
        
        echo "✅ Staging deployment would happen here"
        echo "Environment: staging"
        echo "Images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest"
        echo "        ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"

  # 🏷️ Create Release
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Generate version tag
      id: version
      run: |
        # Generate semantic version based on commits
        VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: v$VERSION"

    - name: 📝 Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits
        CHANGELOG=$(git log --pretty=format:"- %s (%h)" --since="24 hours ago" | head -20)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🏷️ Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: MERN Telemetry Dashboard ${{ steps.version.outputs.version }}
        body: |
          ## 🚀 MERN Telemetry Dashboard Release
          
          ### 📊 What's New
          ${{ steps.changelog.outputs.changelog }}
          
          ### 🐳 Docker Images
          - Frontend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest`
          - Backend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest`
          
          ### 🚀 Quick Start
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd Learning/MERN-Telemetry
          docker-compose up -d
          ```
          
          ### 🔗 Access Points
          - Dashboard: http://localhost:3000
          - API: http://localhost:5001/api
          - Jaeger: http://localhost:16686
        draft: false
        prerelease: false
